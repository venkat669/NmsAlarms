import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.HttpClients;
import org.springframework.http.*;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.nio.file.Paths;

@Service
public class XmlProcessorService {

    public void fetchXmlFromSbiAndProcess(String outputDirPath) {
        String sbiUrl = "http://localhost:8085/api/generate";

        try {
            // Prepare request body
            ObjectMapper mapper = new ObjectMapper();
            String jsonBody = mapper.writeValueAsString(new OutputDirRequest(outputDirPath));

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> entity = new HttpEntity<>(jsonBody, headers);

            // Allow GET with body using Apache HttpClient
            HttpClient httpClient = HttpClients.createDefault();
            HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);
            RestTemplate restTemplate = new RestTemplate(requestFactory);

            // Make the GET request
            ResponseEntity<String> response = restTemplate.exchange(
                    sbiUrl,
                    HttpMethod.GET,
                    entity,
                    String.class
            );

            // Extract raw string file path
            String filePath = response.getBody().trim(); // trimming extra whitespace or newlines
            System.out.println("Received file path: " + filePath);

            // Parse XML file
            File xmlFile = Paths.get(filePath).toFile();
            XmlMapper xmlMapper = new XmlMapper();
            NeidXml neidXml = xmlMapper.readValue(xmlFile, NeidXml.class);

            System.out.println("Timestamp: " + neidXml.getTimestamp());
            neidXml.getNeids().forEach(alarm -> {
                System.out.println("Alarm NE ID: " + alarm.getNe_id());
            });

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Request body class
    static class OutputDirRequest {
        public String outputDir;
        public OutputDirRequest(String outputDir) {
            this.outputDir = outputDir;
        }
    }
}
